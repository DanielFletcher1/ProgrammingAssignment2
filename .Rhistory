ordf[,1:4]
ordf[13,1:4]
sum(nfgdp[,1] %in% edata[,1])
?tapply
names(merged)
tapply(merged[,2], merged[,6], mean)
tapply(merged[,2], merged[,6], mean, na.rm = TRUE)
?quantile
merged$gcut <- cut(merged[,2], breaks = quantile(merged[,2], probs = seq(0, 1, length = 5)))
merged$gcut <- cut(merged[,2], breaks = quantile(merged[,2], probs = seq(0, 1, length = 5), na.rm = TRUE))
table(merged[,6], merged[,35])
merged$gcut <- cut(merged[,2], breaks = quantile(merged[,2], probs = seq(0, 1, .20), na.rm = TRUE))
table(merged[,6], merged[,35])
?solve
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip","gcdata.zip")
status()
dir(getwd())
?zip
?unz
d <- unz("gcdata.zip", "UCI HAR Dataset")
?readLines
test <- readLines(unz(d, "activity_labels.txt"))
remove(getwd()[8])
delete(getwd()[8])
file.remove(getwd()[8])
dir(getwd())
dir(getwd())[8]
dir(getwd(8))
dir(getwd()[8])
dir(getwd()8)
dir(getwd(),)
dir(getwd(),8)
file.remove("gcdata.zip")
dir(getwd())
?tempfile
temp <- tempdir()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip",temp)
data <- read.table(unz(temp, "UCI HAR Dataset"))
unlink(temp)
?zip
?unz
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", "gcdata.zip")
close.connections()
??closeconnections
close()
close(con)
close(download.file())
temp
str(temp)
dir(getwd())
?unzip
unzip("gcdata.zip")
dir(getwd())
?open
dir <- dir(getwd())
dir[30]
file(dir[30])
list.files(dir[30])
test <- readLines("activity_labels.txt")
dir
test <- readlines(paste(getwd(),"/",dir[30],"/","activity_labels.txt",sep=""))
test <- readLines(paste(getwd(),"/",dir[30],"/","activity_labels.txt",sep=""))
test
test2 <- readLines(paste(getwd(),"/",dir[30],"/","features.txt",sep=""))
summary(test2)
str(test2)
test2[1:20]
tail(test2)
?<<-
source('~/.active-rstudio-document')
makeVector(1:4)
source('~/.active-rstudio-document')
cachemean(1:4)
message("testing")
a <- matrix(2:2)
class(a)
str(a)
a
a <- matrix(2,1:2)
a
b <- data.frame(2:2)
b
a <- matrix(c(1:2, 1:2))
a
b <- data.frame(c(1:2, 1:2))
b
?data.frame
b <- data.frame(x = 1:2, y = 1:2)
b
a <- matrix(x = 1:2, y = 1:2)
a <- matrix(c(x = 1:2, y = 1:2))
a
?matrix
a <- matrix(1:4, 2, 2)
a
solve(a)
?solve
1^-1
2^2
non <- matrix(1:3, 2, 2)
non <- matrix(1:3, 2, 1)
non <- matrix(1:3, 1, 1)
non
non <- matrix(1:3, 0 3)
non <- matrix(1:3, 0, 3)
non <- matrix(1:3, 3, 3)
non
non <- matrix(1:3, 3, 2)
non
solve(non)
setwd("C:/Users/Daniel/ProgrammingAssignment2")
dir(getwd)
dir(getwd())
readLines("README.md")
ls
?dir
list.files
list.files()
open("cachematrix.R")
?open
file("cachematrix.R")
??.r
source("cachematrix.R")
load("cachematrix.R")
list.file()
list.files()
?load
load("C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R")
Rscript cachematrix.R
R CMD BATCH cachematrix.R
??r script
??rscript
Rscript cachematrix.R
Rscript "cachematrix.R"
list.files()
shell
list.files()
R CMD BATCH cachematrix.R
Rscript cachematrix.R
Rscript "cachematrix.R"
m <- NULL
class(m)
str(m)
?scalar
??scalar
?c
c("monkey","fast")
help("<<-")
"test" -> test
test
test <- "new"
"diff" -> test
?rnorm
rnorm(20)
set.seed(1); normals <- rnorm(100, 1, 2)
?ls
ls
x <- function(a) {}
ls
x(10)
debug(x)
x(10)
x <- function(a){
a + 2
}
x(2)
y <- function(){
z + 2
}
y(2)
debug(y)
y(3)
ls(x)
ls(environment(x))
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
makeVector(1:4)
cachemean(x)
makeVector
x == x
"x" == "x"
get
get(10)
makeVector(1:5)
debug(makeVector)
makeVector(1:5)
get(x)
x <- 1:4
get(x)
get() x
get
test <- function() x
test()
testmean <- function(mean) a <<- mean
a <- c(1,2,3,4,5)
testmean
testmean()
makeVector(5:9)
cachemean(5:9)
traceback()
cachemean(x)
remove(x)
cachemean(x)
remove(a)
makeVector(1:5)
cachemean(1:5)
x <- 1:5
makeVector(x)
cachemean(x)
seq(1:10)
seq(1:10) == 1:10
a <- seq(1:10); b <- 1:10; a == b
y <- makeVector(x)
cachemean(y)
cachemean(y)
z <- makeVector(x)
cachemean(z)
new <- makeVector(1:4)
q
?debug
new <- makeVector(c(1,3,5,10:20))
undebug(makeVector)
new <- makeVector(c(1,3,5,9,10:20))
new
abc <- c(1,3,5,9,10:20)
def <- makeVector(abc)
def
cachemean(def)
cachemean(def)
cachemean(new)
cachemean(new)
cachemean(y)
debug(cachemean)
cachemean(z)
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
undebug(cachemean)
a <- makeVector(1:4)
cachemean(a)
cachemean(a)
b <- makeVector(1:4)
cachemean(b)
cachemean(b)
list(a = a, b = b, c = c, d = d)
test <- function(mean) m <<- mean
test(1,3,4)
test(1:4)
?function
?function
?mean
?function
mean
m
test2 <- function() m
test2(1:3)
test2()
testing <- function() 1+3+5
testing()
test(1:4)
test
testing2 <- function(mean) a
testing2(1:5)
testing2
get <- funciton() x
x <- 4
get <- funciton() 4
get <- funciton() x
get <- function() x
get()
setmean <- function(mean) m <<- mean
setmean(1:5)
m
setmean()
getmean <- function() m
getmean()
set <- function(y) {
x <<- y
m <<- NULL
}
set(10)
get <- function() x
get()
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean, getmean = getmean)
m <- x$getmean()
new <- list(set = set, get = get, setmean = setmean, getmean = getmean)
m <- new$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- new$get()
m <- mean(data)
new$setmean(m)
mean
m
m <- new$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
a <<- apple
a <<- mean
a
help("<<-")
a <- b <- c <- 6
m <<- mean
m
m(25)
m(25,10,30)
m(c(25, 10, 30))
30 = numeric()
a <- 1:20
a = numeric()
fun <- function(x = numeric()) x
fun(20)
a <- fun(20)
b <- fun(1:30)
class(b)
str(b)
x <<- y
x <<- 10
test <- function(y) {x <<- y}
test(10)
debug(test)
test(20)
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
a <- makeVector(1:20)
debug(makeVector)
b <- makeVector(21:30)
debug(cachemean)
cachemean(b)
remove(a)
remove(b)
a <- makeVector(1:10)
p
a
setmean <- function(mean) m <<- mean
setmean(c(1, 3, 5, 10))
m
mean
m <<- mean
m
10 <<- mean
m
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
a <- makeVector(1:10)
cachemean(a)
cachemean(a)
cachemean(a)
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
b <- makevector(1:10)
b <- makeVector(1:10)
cachemean(b)
cachemean(b)
testing <- function(mean) m <<- mean
testing(1:10)
m
mean
testing(mean)
setmean <- function(mean) m <<- mean
setmean(1:10)
setmean(mean)
m
m(1:10)
setmean <- function(mean) m <<- mean
setmean <- function(mean) m <<- mean
setmean <- function(mean) m <<- mean
setmean(1:10)
mean
m
setmean(m)
setmean(m)
m
setmean <- function(mean) m <<- mean
data <- 1:10
m <- mean(data, ...)
m <- mean(data, ...)
m <- mean(data)
setmean <- function(mean) m <<- mean
m
m <<- mean
setmean <- function(mean) m <<- mean
setmean(1:10)
setmean(11:20)
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
a <- makeVector(1:10)
cachemean(a)
traceback()
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
a <- makeVector(1:10)
a
a <- 1:2
a
source('~/.active-rstudio-document')
a <- makevector(1:10)
a <- makeVector(1:10)
cachemean(a)
cachemean(a)
source('C:/Users/Daniel/Desktop/Coursera/Data Science/vectorcache.R')
a <- matrix(1:4,2,2)
a
solve(a)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
remove(a)
a <- makeCacheMatrix(1:4,2,2)
a <- makeCacheMatrix(c(1:4,2,2))
cacheSolve(a)
a
b <- matrix(1:4,2,2)
b
remove(a)
makeCacheMatrix(c(1:4,2,2))
remove(b)
a <- makeCacheMatrix(c(1:4,2,2))
cacheSolve(a)
debug(cacheSolve)
cacheSolve(a)
remove(a)
creatematrix <- function(x = matrix())
{}
creatematrix(1:4)
matrix(1:4)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix(1:4,2,2)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
a <- matrix(1:4,2,2)
a
b <- makeCacheMatrix(a)
cacheSolve(b)
traceback()
debug(cacheSolve)
cacheSolve(b)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
cacheSolve(b)
c <- matrix(1:4,4,4)
c
makeCacheMatrix(c)
d <- makeCacheMatrix
remove(d)
d <- makeCacheMatrix(c)
cacheSolve(d)
debug(cacheSolve)
cacheSolve(d)
?solve
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
cacheSolve(d)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
cacheSolve(d)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R')
c
e <- matrix(1:4,3,3)
e <- matrix(1:3,3,3)
f <- makeCacheMatrix(e)
cacheSolve(f)
debug(cacheSolve)
cacheSolve(f)
source('C:/Users/Daniel/ProgrammingAssignment2/cachematrix.R', echo=TRUE)
a <- matrix(4:6,3,3)
b <- makecacheMatrix(a)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(10),5,5)
a
b <- makeCacheMatrix
remove(b)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(10),4,4)
a <- matrix(rnorm(8),4,4)
b <- makeCacheMatrix(a)
cacheSolve(b)
solve(a)
a
c <- matrix(4:1,2,2)
solve(c)
c <- matrix(8:1,2,2)
solve(c)
help("%*%")
a
c
a %*% c
?matrix
d <- matrix(1:4, 5:8, nrow = 4, ncol = 4)
d
d <- matrix(c(1:4, 5:8), nrow = 4, ncol = 4)
d
is.matrix(d)
solve(d)
d <- matrix(c(1:3, 5:8), nrow = 4, ncol = 4)
d <- matrix(c(2:5, 5:8), nrow = 4, ncol = 4)
d
solve(d)
d <- matrix(c(2:5, 5:8), nrow = 5, ncol = 5)
d <- matrix(1:5, nrow = 5, ncol = 5)
solve(d)
d <- matrix(1:6, nrow = 6, ncol = 6)
solve(d)
d <- matrix(rnorm(6), nrow = 6, ncol = 6)
solve(d)
d <- matrix(rnorm(7), nrow = 7, ncol = 7)
solve(d)
d
d <- matrix(c(1,3,5,7,9,10,11), nrow = 7, ncol = 7)
d
solve(d)
set.seed(1); num1 <- rnorm(10)
set.seed(2); num2 <- rnorm(10)
e <- matrix(c(num1,num2),10,10)
e
solve(e)
